Algebraic Normal Form (ANF) for Multiplying Two Polynomials over GF(2^4)=GF16
File compiled on 2024-01-20T07:14:59.727 UTC
Scope: NIST Circuit Complexity Project: https://csrc.nist.gov/projects/circuit-complexity

GF16mult2: pOut = pIn1 * pIn2 (mod pMod), where:
pIn1 = a0 + (a1) x^1 + (a2) x^2 + (a3) x^3
pIn2 = b0 + (b1) x^1 + (b2) x^2 + (b3) x^3
pMod = 1 + x^1 + x^4
pOut = c0 + (c1) x^1 + (c2) x^2 + (c3) x^3


# monomials across degrees: [4, 7, 6, 5]

Boolean functions across degrees:

c0 = a0 b0 + a3 b1 + a2 b2 + a1 b3

c1 = a1 b0 + a0 b1 + a3 b1 + a2 b2 + a3 b2 + a1 b3 + a2 b3

c2 = a2 b0 + a1 b1 + a0 b2 + a3 b2 + a2 b3 + a3 b3

c3 = a3 b0 + a2 b1 + a1 b2 + a0 b3 + a3 b3


Algebraic Normal Form (ANF) across degrees:

Order of coefficients (variables) considered in each Algebraic Normal Form (ANF) encoding: a0 a1 a2 a3 b0 b1 b2 b3

ANF(c0), with length 256, is 1 in 4 positions: [18, 41, 69, 131]
ANF(c0) [bitVector encoding]: 0000000000000000010000000000000000000000100000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

ANF(c1), with length 256, is 1 in 7 positions: [19, 34, 41, 69, 73, 131, 133]
ANF(c1) [bitVector encoding]: 0000000000000000001000000000000001000000100000000000000000000000000010001000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

ANF(c2), with length 256, is 1 in 6 positions: [21, 35, 66, 73, 133, 137]
ANF(c2) [bitVector encoding]: 0000000000000000000010000000000000100000000000000000000000000000010000001000000000000000000000000000000000000000000000000000000000001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

ANF(c3), with length 256, is 1 in 5 positions: [25, 37, 67, 130, 137]
ANF(c3) [bitVector encoding]: 0000000000000000000000001000000000001000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

The ANF of d-ary (# input bits) Boolean function is a sequence of 2^d bits. The i^th bit indicates whether the monomial with coefficients corresponding to digits(i-1,base=2,pad=d) appears in the corresponding Boolean function.For example, for a Boolean function on 8 variables (e.g., a0 ... a7), the 18th bit in the ANF encoding (in little endian ordering), counting from the left, corresponds to the binary encoding 10001000 on integer 17, which in turn corresponds to monomial a0 a4.